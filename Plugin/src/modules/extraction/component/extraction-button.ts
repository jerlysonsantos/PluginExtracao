import { ExtractionUseCase } from '../useCases/extraction-usecase';

export class ExtractionButton extends HTMLElement {
  public extractionUseCase: ExtractionUseCase = new ExtractionUseCase();

  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.render();
  }

  styleCustom() {
    const style = document.createElement('style');
    style.textContent = `
      #extract-button {
        position: fixed;
        top: 30%;
        right: .5rem;
      }

      button {
        background-color: #1976d2;
        box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);
        color: white;
        padding: 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      
      button:hover {
        background-color: #1565c0;
      }
    `;

    return style;
  }

  startLoading() {
    if (!this.shadowRoot) {
      return;
    }

    const button = this.shadowRoot.querySelector('#extract-button');
    button!.innerHTML = this.loadSvg();
    button!.setAttribute('disabled', 'true');
  }

  stopLoading() {
    if (!this.shadowRoot) {
      return;
    }

    const button = this.shadowRoot.querySelector('#extract-button');
    button!.textContent = 'Extrair';
    button!.removeAttribute('disabled');
  }

  loadSvg() {
    return `
      <div class="loading-icon">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="shape-rendering: auto; display: block; background: rgba(255, 255, 255, 0);" width="30" height="30" xmlns:xlink="http://www.w3.org/1999/xlink"><g><circle stroke-dasharray="164.93361431346415 56.97787143782138" r="35" stroke-width="10" stroke="#000000" fill="none" cy="50" cx="50">
          <animateTransform keyTimes="0;1" values="0 50 50;360 50 50" dur="1s" repeatCount="indefinite" type="rotate" attributeName="transform"></animateTransform>
        </circle><g></g></g><!-- [ldio] generated by https://loading.io --></svg>
      </div>
    `;
  }

  renderToast(textContent: string = 'Extração realizada com sucesso!', type: 'success' | 'error' = 'success') {
    const toast = document.createElement('aside');

    toast.id = 'toast';
    toast.setAttribute('aria-label', `Mensagem de ${type === 'success' ? 'sucesso' : 'erro'}`);

    toast.textContent = textContent;
    toast.style.cssText = `
      position: fixed;
      top: 1rem;
      right: 1rem;
      background-color: ${type === 'success' ? 'rgb(237, 247, 237)' : 'rgb(253, 237, 237)'} ;
      color: ${type === 'success' ? 'rgb(30, 70, 32)' : 'rgb(95, 33, 32)'};
      padding: 12px 16px;;
      border-radius: 5px;
      font-size: 16px;
    `;

    document.body.append(toast);

    setTimeout(() => {
      toast.remove();
    }, 3000);
  }

  render() {
    if (!this.shadowRoot) {
      return;
    }

    const button = document.createElement('button');
    button.textContent = 'Extrair';
    button.id = 'extract-button';
    button.addEventListener('click', async () => {
      try {
        this.startLoading();
        await this.extractionUseCase.collect();
        this.renderToast();
      } catch (error) {
        this.renderToast(String(error).split(':')[1], 'error');
      } finally {
        this.stopLoading();
      }
    });

    this.shadowRoot.append(this.styleCustom(), button);
  }
}
